var somethingChanged = false;
var editorOpen = false;
var editor = {};

document.getElementById('new-article-button').style = "display: block";
document.getElementById('release-button').style = "display: block";

document.addEventListener('click', (event) => {
  let outsideEditor = true;
  event.composedPath().forEach(async (element) => {
    try {
      if (element.dataset.hasmd === 'true') outsideEditor = false;

      if (element.hasAttribute('editable') && element.dataset.hasmd !== 'true' && !editorOpen) {

        let markdown;

        if (element.getAttribute('editable') !== '') {
          if (element.dataset.md && element.dataset.md.length > 0) {
            markdown = element.dataset.md;
          } else {
            const url = `/markdowns/${element.getAttribute('editable')}.md`;
            try {
              const response = await fetch(url);
              if (response.status === 200) {
                markdown = await response.text();
                markdown = markdown.split('\n---')[1];
              }
            } catch (error) {
              console.error(error);
            }
          }
        }

        editor = new toastui.Editor({
          el: element,
          height: Math.max(element.offsetHeight, 450) + 'px',
          initialEditType: 'markdown',
          previewStyle: 'tab',
          usageStatistics: false,
          initialValue: markdown,
          language: 'pt-PT',
          events: {
            change: function(event) {
              element.dataset.md = editor.getMarkdown();
              if (!somethingChanged) {
                somethingChanged = true;
                document.getElementById('preview-button').style.display = "block";
              }
            }
          }
        });

        element.dataset.hasmd = 'true';
        outsideEditor = false;
        editorOpen = true;
      }
    } catch (error) {}
  });

  if (editorOpen && outsideEditor) {
    document.querySelectorAll('[editable]').forEach(element => {
      if (element.getAttribute('editable') !== '' && element.dataset.hasmd) {
        console.log('closing editor');

        // Remove editor
        element.removeChild(element.firstElementChild);

        // Remove preview class
        editor.preview.previewContent.classList.remove('toastui-editor-contents')

        // Append new child
        element.style = '';
        element.appendChild(editor.preview.previewContent);
        element.dataset.hasmd = 'false';
        editorOpen = false;
      }
    });
  }
});

function preview () {
  document.querySelectorAll('[editable]').forEach(async (element) => {
    if (element.dataset.md && element.getAttribute('editable') !== '') {
      try {
        showSpinnerOverlay();
        const putResponse = await fetch(`/api/markdown/${element.getAttribute('editable').replace('/','_')}`,
                                        {
                                          method: 'PUT',
                                          headers: {'Content-Type': 'application/json'},
                                          body: JSON.stringify(
                                            {
                                              id: element.getAttribute('editable'),
                                              markdown: element.dataset.md
                                            })
                                        });
        console.log('reloading');
        location.reload();
      } catch (error) {
        console.log(error);
      }
    }
  });
}

async function release () {
  try {
    showSpinnerOverlay();
    await fetch('/api/release/', {method: 'GET'});
    console.log('release');
    hideSpinnerOverlay();
  } catch (error) {
    console.log(error);
  }
}

async function creatArticle () {
  hideFormOverlay();

  let data = {};
  data.id = document.getElementById("form-id").value;
  data.title = document.getElementById("form-tittle").value;
  data.description = document.getElementById("form-description").value;
  data.author = document.getElementById("form-author").value;

  const image = document.getElementById("form-image").files[0];

  if (image) {
    data.image = `/uploads/${image.name}`;
    let formData = new FormData();
    formData.append("image", image);

    try {
      const uploadResponse = await fetch("/api/upload/", { method: 'POST', body: formData });
    } catch (error) {
      console.log(error);
    }
  }

  try {
    showSpinnerOverlay();
    const postResponse = await fetch("/api/markdown/", { method: 'POST', headers: {'Content-Type': 'application/json'}, body: JSON.stringify(data) });
    console.log('reloading');
    location.reload();
  } catch (error) {
    console.log(error);
  }
  return false;
}

function showSpinnerOverlay () {
  document.getElementById('spinner-overlay').style.display = "flex";
}

function hideSpinnerOverlay () {
  document.getElementById('spinner-overlay').style.display = "none";
}

function showFormOverlay () {
  document.getElementById('form-overlay').style.display = "flex";
}

function hideFormOverlay () {
  document.getElementById('form-overlay').style.display = "none";
}